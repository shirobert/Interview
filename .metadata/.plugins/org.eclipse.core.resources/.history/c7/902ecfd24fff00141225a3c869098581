package mixed;

public class DynamicPro {

	/*A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
	http://articles.leetcode.com/2010/11/unique-paths.html
       */
	
	public int uniquePaths(int m, int n) {
		
		int [][] mat = new int[m+1][n+1];
		for (int i = 0; i<m+1 ; i++){
			mat[i][n] =1;
		}
		for(int j = 0; j<n+1; j++){
			mat[m][j] = 1;
		}
		
		for(int i=m-1; i>0; i--){
			for (int j=n-1; j>0; j--){
				mat[i][j] = mat[i+1][j]+ mat[i][j+1];
			}
		}
		
		return mat[1][1];
	}
	
	/**
	 *  You have n types of items, where the ith item type has an integer size si and a real value vi. You need to Ô¨Åll a knapsack of total capacity C with a selection of items of maximum value.
	 */

	public int knapsack_0_1(int N, int[] weight, int [] value, int cap){
		
		
		int opt[][] = new int[N+1][cap+1];
		int sol[][] = new int[N+1][cap+1];
		
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= cap; j++) {
				// option 1; if item i is not selected or weight[i] > j
				int option1 = opt[i - 1][j];

				// option 2;
				int option2 = 0;
				if (weight[i - 1] <= j) {
					option2 = opt[i - 1][j - weight[i - 1]] + value[i - 1];
				}

				opt[i][j] = (option1 > option2) ? option1 : option2;
				sol[i][j] = (option2 > option1) ? true : false;

			}
		}
		
		//  determine which item to take
		boolean take[] = new boolean [N];
		for (int n = N, w = cap; n > 0; n--) {
			if (sol[n][w] != 0) {
				take[n] = true;
				w = w - weight[n - 1];
			} else {
				take[n] = false;
			}
		}

	// print out which one to take.

	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
