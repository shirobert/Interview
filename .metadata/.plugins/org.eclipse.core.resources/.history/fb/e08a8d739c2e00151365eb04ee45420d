package com.interview.number;
import java.util.*;

public class Array {

	/**
	 *  Search roated sorted array
	 *  
	 *  Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.
You may assume no duplicate exists in the array.

Solution

Time ~ O(logN), Space ~ O(1) 
注意是 sorted array，所以：
1. 如果 num[lo] 不大于 num[hi]（循环附加条件），即 array 没有被 rotate，可停止循环，返回 num[lo] 为 min。
2. 剔除了 unrotated array 后，有两种情况：
num[mid] > num[lo], num[mid] > num[hi]：mid 和 lo 在一侧，则移动 lo；
num[mid] < num[lo], num[mid] < num[hi]：mid 和 hi 在一侧，则移动 hi。
	 *  
	 * @param S
	 * @return
	 */
	
	public int findMin(int[] num) {
	    int lo = 0, hi = num.length - 1;
	    while (lo < hi && num[lo] > num[hi]) {
	        int mid = (lo + hi) / 2;
	        if (num[mid] > num[hi]) lo = mid + 1;
	        else                    hi = mid;
	    }
	    return num[lo];
	}
	
	
	/*
	 * Find Minimum in Rotated Sorted Array II: contains duplicates
	 * 
	 * 1. 如果 num[lo] 小于 num[hi]（循环附加条件），可停止循环，num[lo] 即为 min。
2. 若 num[lo] >= num[hi]，当没有 duplicates 只有两种情况：
num[mid] > num[lo], num[mid] > num[hi]：mid 和 lo 在一侧，则移动 lo；
num[mid] < num[lo], num[mid] < num[hi]：mid 和 hi 在一侧，则移动 hi；
当存在 duplicates 时会增加另一种情况：
不论 mid 在哪一侧：num[mid] == num[lo] or num[mid] == num[hi]，则将 hi 后移一位（也可将 lo 前移一位）。
	 */
	
	public int findMin2(int[] num) {
	    int lo = 0, hi = num.length - 1;
	    while (lo < hi && num[lo] >= num[hi]) {
	        int mid = (lo + hi) / 2;
	        if (num[mid] > num[hi])         lo = mid + 1;
	        else if (num[mid] < num[hi])    hi = mid;
	        else                            hi--;
	    }
	    return num[lo];
	}
	
	
	
	/**
	 * Search in Rotated Sorted Array I: no duplicates

Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.

Solution

Binary Search: Time ~ O(logN), Space ~ O(1) 
1. 循环条件只用 lo < hi，此处不能剔除 unrotated case。
2. 三种情况：
num[mid] > num[lo], num[mid] < num[hi]：unrotated array
num[mid] < num[lo], num[mid] < num[hi]：rotated array，mid 和 hi 在一侧
上面两种情况，num[mid .. hi] 为升序，判断 target 在此区间中，则移动 lo，否则移动 hi；
num[mid] > num[lo], num[mid] > num[hi]：rotated array，mid 和 lo 在一侧
第三种情况下，num[lo .. mid] 为升序，判断 target 在此区间中，则移动 hi，否则移动 lo。
3. 最后需判断 num[lo] 是否为 target，若不等则表明未找到，返回 -1。
	 * @param S
	 * @return
	 */
	public int search(int[] A, int target) {
	    int lo = 0, hi = A.length - 1;
	    while (lo < hi) {
	        int mid = (lo + hi) / 2;
	        if (A[mid] == target) return mid;
	        if (A[mid] < A[hi]) {   // [mid..hi] is inorder (Or using A[mid] >= A[lo])
	            if (A[mid] < target && A[hi] >= target) lo = mid + 1; // target is in [mid..hi]
	            else                                    hi = mid;
	        } else {                // [lo..mid] is inorder
	            if (A[lo] <= target && A[mid] > target) hi = mid;   // target is in [lo..mid]
	            else                                    lo = mid + 1;
	        }
	    }
	    if (A[lo] == target)    return lo;
	    else                    return -1;
	}
	
	
	
	
	/**
	 * Search in Rotated Sorted Array II: contains duplicates

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?
Write a function to determine if a given target is in the array.

Solution

Binary Search: Time ~ O(logN) worst case ~ O(N), Space ~ O(1) 
Slight modifications:
除上述的两种情况：
num[mid] < num[hi]，若 target 在 num[mid .. hi] 中，则移动 lo，否则移动 hi；
num[mid] > num[hi]，若 target 在 num[lo .. mid] 中，则移动 hi，否则移动 lo；
再增加另一种情况：
num[mid] == num[hi]，将 hi 后移一位（不能将 hi = mid，因为会漏掉 mid 到 hi 中大的元素，比如 [1, 1, 3, 1], target = 3）。
	 * @param S
	 * @return
	 */

	public boolean search(int[] A, int target) {
	    int lo = 0, hi = A.length - 1;
	    while (lo < hi) {
	        int mid = (lo + hi) / 2;
	        if (A[mid] == target)   return true;
	        if (A[mid] < A[hi]) {   // [mid..hi] is inorder
	            if (A[mid] < target && A[hi] >= target) lo = mid + 1;
	            else                                    hi = mid;
	        } else if (A[mid] > A[hi]) {    // [lo..mid] is inorder
	            if (A[lo] <= target && A[mid] > target) hi = mid;
	            else                                    lo = mid + 1;
	        } else /* if (A[mid] == A[hi]) */ { // add this part for the duplicated case
	            hi--;
	        }
	    }
	    if (A[lo] == target)    return true;
	    else                    return false;
	}	
	
	
	// subsetsWithoutDup
	
	public List<List<Integer>> subsets(int[] S) {
	    Arrays.sort(S);
	    addUp2(S, 0);
	    return listSet;
	}

	private void addUp2(int[] S, int start) {
	    // if (!listSet.contains(list))         // No need to check duplicate lists!!
	        listSet.add(new ArrayList<Integer>(list));
	    for (int i = start; i < S.length; i++) {
	        list.add(S[i]);
	        addUp(S, i + 1);
	        list.remove(list.size() - 1);
	    }
	}
	
// subsetsWithDup
	private List<List<Integer>> listSet = new ArrayList<List<Integer>>();
	private List<Integer> list = new ArrayList<Integer>();

	public List<List<Integer>> subsetsWithDup(int[] S) {
	    Arrays.sort(S);
	    addUp(S, 0);
	    return listSet;
	}

	private void addUp(int[] S, int start) {
	    // if (!listSet.contains(list))         // No need to check duplicate lists!! 
	        listSet.add(new ArrayList<Integer>(list));
	    for (int i = start; i < S.length; i++) {
	        if (i > start && S[i - 1] == S[i]) continue; // skip the duplicated elements (important pruning step to increase speed)!!
	        list.add(S[i]);
	        addUp(S, i + 1);
	        list.remove(list.size() - 1);
	    }
	}
	
	
	
	/* No. 15
	 *  3sum
	 * Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
	Note:
	Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
	The solution set must not contain duplicate triplets.
	    For example, given array S = {-1 0 1 2 -1 -4},
	    A solution set is:
	    (-1, 0, 1)
	    (-1, -1, 2)
	 * 
	 */
		
		public List<List<Integer>> threeSum(int[] num) {
		    Arrays.sort(num);
		    
		    List<List<Integer>> listSet = new ArrayList<List<Integer>>();        
		    for (int i = 0; i < num.length - 2; i = increment(num, i)) {
		        int a = num[i], lo = i + 1, hi = num.length - 1;
		        while (lo < hi) {
		            int b = num[lo], c = num[hi];
		            if (a + b + c == 0) {
		                List<Integer> list = Arrays.asList(a, b, c);
		                listSet.add(list); // if (!listSet.contains(list)) listSet.add(list);                     
		                lo = increment(num, lo); // lo++;
		                hi = decrement(num, hi); // hi--;
		            } else if (a + b + c > 0) {
		                hi = decrement(num, hi); // hi--;
		            } else if (a + b + c < 0) {
		                lo = increment(num, lo); // lo++;
		            }
		        }
		    }        
		    return listSet;
		}

		private int increment(int[] num, int lo) {
		    while (lo < num.length - 1 && num[lo] == num[++lo]) {}
		    return lo;
		}
		    
		private int decrement(int[] num, int hi) {
		    while (hi > 0 && num[hi] == num[--hi]) {}
		    return hi;
		}
		
	/**
	 * No. 16
	 * 3sum closet	
	 * Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
	    For example, given array S = {-1 2 1 -4}, and target = 1.
	    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

	 */
		
		public int threeSumClosest(int[] num, int target) {
		    Arrays.sort(num);
		    
		    int closest = num[0] + num[1] + num[2];
		    for (int i = 0; i < num.length - 2; i = increment(num, i)) {
		        int a = num[i], lo = i + 1, hi = num.length - 1;
		        while (lo < hi) {
		            int b = num[lo], c = num[hi];
		            int sum = a + b + c;
		            if (sum == target)
		                return sum;
		            else if (Math.abs(target - sum) < Math.abs(target - closest))
		                closest = sum;
		            
		            if (target > sum)   lo = increment(num, lo);
		            else                hi = decrement(num, hi);
		        }
		    }
		    return closest;
		}
		
		
		
	
}
