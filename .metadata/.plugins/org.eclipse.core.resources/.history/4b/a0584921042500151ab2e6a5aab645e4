package com.interview.number;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Number of islands
 */

public int numIslands(char[][] grid) {
    int count = 0;
    int n = grid.length();
    if (n == 0) return 0;
    int m = grid[0].length;
    for (int i = 0; i < n; i++){
        for (int j = 0; j < m; j++)
            if (grid[i][j] == '1') {
                DFSMarking(grid, i, j, m, n);
                ++count;
            }
    }    
    return count;
}

private void DFSMarking(char[][] grid, int i, int j, int m, int n) {
    if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != '1') return;
    grid[i][j] = '0';
    DFSMarking(grid, i + 1, j, m,n);
    DFSMarking(grid, i - 1, j, m, n);
    DFSMarking(grid, i, j + 1, m, n);
    DFSMarking(grid, i, j - 1, m, n);
/**
 * Given a matrix of m âœ•n elements (m rows, n columns), return all elements of the matrix in spiral order.
For example, given the following matrix:
[
  [ 1, 2, 3 ],
  [ 4, 5, 6 ],
  [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

 * @author leish
 *
 */

public class Matrix {

	
	/**
	 * Word search II
	 * 
	 * Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].

	 */
	
	private static final int R = 26; // lowercase letter a to z
	private Node root;    

	// R-way trie node
	private static class Node {
	    private String val;
	    private Node[] next = new Node[R];
	}

	// insert key-value pair into trie
	private void insert(String key, String val) {
	    root = put(root, key, val, 0);
	}

	private Node put(Node x, String key, String val, int d) {
	    Node xCopy = x;
	    if (xCopy == null)  xCopy = new Node();
	    if (d == key.length()) {
	        xCopy.val = val;
	        return xCopy;
	    }
	    int c = key.charAt(d) - 'a';
	    xCopy.next[c] = put(xCopy.next[c], key, val, d + 1);
	    return xCopy;
	}

	public List<String> findWords(char[][] board, String[] words) {
	    List<String> list = new ArrayList<>();
	    int M = board.length;
	    if (M == 0) return list;
	    int N = board[0].length;
	    
	    // convert dictionary to a trie
	    int dictSize = words.length;
	    if (dictSize == 0) return list;
	    for (int i = 0; i < dictSize; i++) {
	        String word = words[i];
	        insert(word, word);
	    }
	            
	    // use DFS to search all valide words
	    boolean[][] visited = new boolean[M][N];
	    for (int i = 0; i < M; i++) {
	        for (int j = 0; j < N; j++) {
	            char letter = board[i][j];
	            int c = letter - 'a';
	            dfs(board, visited, i, j, root.next[c], list);
	        }
	    }
	    
	    // sort the list
	    Collections.sort(list);
	    return list;
	}

	// DFS
	private void dfs(char[][] board, boolean[][] visited, int i, int j, Node x, List<String> list) {
	    if (x == null)  return;
	    if (x.val != null && !list.contains(x.val)) {
	        list.add(x.val);
	    }
	    visited[i][j] = true;
	    if (i > 0 && !visited[i - 1][j])                    // up
	        dfs(board, visited, i - 1, j, x.next[board[i - 1][j] - 'a'], list);
	    if (i < board.length - 1 && !visited[i + 1][j])     // down
	        dfs(board, visited, i + 1, j, x.next[board[i + 1][j] - 'a'], list);
	    if (j > 0 && !visited[i][j - 1])                    // left
	        dfs(board, visited, i, j - 1, x.next[board[i][j - 1] - 'a'], list);
	    if (j < board[0].length - 1 && !visited[i][j + 1])  // right
	        dfs(board, visited, i, j + 1, x.next[board[i][j + 1] - 'a'], list);        
	    visited[i][j] = false;
	}

	
	/**
	 * No. 79
	 * word search I
	 * Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
	 */

	public boolean exist(char[][] board, String word) {
	    int m = board.length;
	    int n = board[0].length;
	    boolean[][] visited = new boolean[m][n];
	    for (int i = 0; i < m; i++) {
	        for (int j = 0; j < n; j++) {
	            if (dfs(board, visited, i, j, 0, word))
	                return true;
	        }
	    }
	    return false;
	}

	private boolean dfs(char[][] board, boolean[][] visited, int i, int j, int index, String word) {
	    if (index == word.length())   return true;
	    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length)    return false;   // stop if cross the board
	    if (visited[i][j])   return false;  // stop if visited
	    if (board[i][j] != word.charAt(index))  return false;   // stop if not match
	    visited[i][j] = true;   // marked as visited
	    boolean match = dfs(board, visited, i - 1, j, index + 1, word)
	                 || dfs(board, visited, i, j - 1, index + 1, word)
	                 || dfs(board, visited, i + 1, j, index + 1, word)
	                 || dfs(board, visited, i, j + 1, index + 1, word);
	    visited[i][j] = false;
	    return match;
	}
	
	
	public List<Integer> spiralOrder(int[][] matrix) {
		   List<Integer> elements = new ArrayList<>();
		   if (matrix.length == 0) return elements;
		   int m = matrix.length, n = matrix[0].length;
		   int row = 0, col = -1;
		   while (true) {
		      for (int i = 0; i < n; i++) {
		         elements.add(matrix[row][++col]);
		      }
		      if (--m == 0) break;
		      for (int i = 0; i < m; i++) {
		         elements.add(matrix[++row][col]);
		      }
		      if (--n == 0) break;
		      for (int i = 0; i < n; i++) {
		         elements.add(matrix[row][--col]);
		      }
		      if (--m == 0) break;
		      for (int i = 0; i < m; i++) {
		         elements.add(matrix[--row][col]);
		      }
		      if (--n == 0) break;
		   }
		   return elements;
		}
/**
 * No. 74
 * Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.
 * 
 * 	
 * @param matrix
 * @param target
 * @return
 */
public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        int j = n-1;
        int i = 0;
        while(i< m && j>=0){
        	if(matrix[i][j] > target){
        		j--;
        	}else if(matrix[i][j] <target){
        		i++;
        	}else{
        		return true;
        	}
        }
        
        return false;
    }
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
