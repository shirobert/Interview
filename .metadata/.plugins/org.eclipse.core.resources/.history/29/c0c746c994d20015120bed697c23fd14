package com.interview.number;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;



public class Matrix {
	

	
	/**
	 * No 54
	 * You are given an n x n 2D matrix representing an image.
Rotate the image by 90 degrees (clockwise).
Follow up:
Could you do this in-place?

Solution

Time ~ O(N^2), Space ~ O(1) 
Rotate 90 clockwise: A -> B -> C -> D -> A
                         [i, j]
                     —  A  ————
                    |                          |
                    |                         B [j, n - 1 - i]
                    |                          |
                    |                          |
[n - j - 1, i]   D                         |
                    | ———— C —  |
                       [n - i - 1, n - 1 - j]
	 */
	public void rotate(int[][] matrix) {
	    int N = matrix.length;
	    int halfN = (N % 2 == 0) ? N / 2 : N / 2 + 1;
	    for (int i = 0; i < halfN; i++) {
	        for (int j = i; j < N - i - 1; j++) {
	    //  for (int j = 0; j < N / 2; j++) { // alternative to replace the above line
	            int k = N - i - 1, l = N - j - 1;
	            int tmp = matrix[i][j];
	            matrix[i][j] = matrix[l][i];    // top   <- left
	            matrix[l][i] = matrix[k][l];    // right <- top
	            matrix[k][l] = matrix[j][k];    // down  <- right
	            matrix[j][k] = tmp;             // left  <- down
	        }
	    }
	}
/**
 * Is valid sudoku	
 */

	public boolean isValidSudoku(char[][] board) {
	    boolean[] visited = new boolean[9];
	    // check 9 rows
	    for (int i = 0; i < 9; i++) {
	        Arrays.fill(visited, false);
	        for (int j = 0; j < 9; j++)
	            if (!isValid(i, j, board, visited)) return false;
	    }
	    // check 9 columns
	    for (int i = 0; i < 9; i++) {
	        Arrays.fill(visited, false);
	        for (int j = 0; j < 9; j++)
	            if (!isValid(j, i, board, visited)) return false;
	    }
	    // check 9 sub-boxes
	    for (int i = 0; i < 3; i++)
	        for (int j = 0; j < 3; j++) {
	            Arrays.fill(visited, false);
	            for (int k = 0; k < 9; k++)
	                if (!isValid(i * 3 + k / 3, j * 3 + k % 3, board, visited)) return false;
	        }
	    return true;
	}

	private boolean isValid(int i, int j, char[][] board, boolean[] visited) {
	    if (board[i][j] != '.') {
	        if (visited[board[i][j] - '1'])     return false;
	        else                                visited[board[i][j] - '1'] = true;
	    }
	    return true;
	}
	
	
/**
 * Sudoku Solver	
 * Write a program to solve a Sudoku puzzle by filling the empty cells.
Empty cells are indicated by the character '.'.
You may assume that there will be only one unique solution.

DFS: Time ~ O(N!), Space ~ O(1) 
对所有的空格 '.' 逐个填补，从 '1' 选到 '9' 依次尝试，判断：
此时的 board 是否 valid：用上题的方法 isValid()，区别为这里只要判断当前行、当前列、和当前所在的 subbox 是否含有和自身相同的元素即可，不需要用 Hashtable；
接下去的 board 是否 solvable：DFS，call recursive method isSolvable()，注意其需要返回 boolean 值，如果联合上面两个条件都成立，则返回 true；如果从 '1' 到 '9' 尝试都不成功，则返回 false。
 */
	
	
	public void solveSudoku(char[][] board) {
	    if (!isSolvable(board))
	        throw new IllegalArgumentException("Not solvable!");
	}

	// DFS
	private boolean isSolvable(char[][] board) {
	    for (int i = 0; i < 9; i++) {
	        for (int j = 0; j < 9; j++) {
	            if (board[i][j] == '.') {
	                for (int k = 0; k < 9; k++) {
	                    board[i][j] = (char)(k + '1');
	                    if (isValid(i, j, board) && isSolvable(board)) return true;
	                    board[i][j] = '.';
	                }
	                return false;
	            }
	        }
	    }
	    return true;
	}

	private boolean isValid(int i, int j, char[][] board) {
	    // check ith row
	    for (int c = 0; c < 9; c++)
	        if (c != j && board[i][c] == board[i][j])   return false;
	    // check jth col
	    for (int r = 0; r < 9; r++)
	        if (r != i && board[r][j] == board[i][j])   return false;
	    // check (i,j)'s subbox
	    for (int k = 0; k < 9; k++) {
	        int row = i / 3 * 3 + k / 3, col = j / 3 * 3 + k % 3;
	        if (row != i && col != j && board[row][col] == board[i][j]) return false;
	    }
	    return true;
	}	
	
/**
 * Surrounded Regioins
 */


public void surroundedRegions(char[][] board) {
    int m = board.length;
    if (m < 1)  return;
    int n = board[0].length;
    if (m <= 2 || n <= 2)   return;
    
    // run flood fill algorithm (BFS) on every boundry point
    for (int i = 0; i < m; i++) {
        bfs(board, i, 0);       // first column
        bfs(board, i, n - 1);   // last column
    }
    for (int j = 1; j < n - 1; j++) {
        bfs(board, 0, j);       // first row;
        bfs(board, m - 1, j);   // last row;
    }
    
    // flip 'O' to 'X' and recover '#' to 'O'
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 'O')         board[i][j] = 'X';
            else if (board[i][j] == '#')    board[i][j] = 'O';
        }
}

// BFS
private void bfs(char[][] board, int i, int j) {
    Queue<Integer> q = new LinkedList<>();
    visit(board, i, j, q);
    while (!q.isEmpty()) {
        int pos = q.poll();
        int x = pos / board[0].length;
        int y = pos % board[0].length;
        visit(board, x - 1, y, q);
        visit(board, x, y + 1, q);
        visit(board, x + 1, y, q);
        visit(board, x, y - 1, q);
    }
}

// Mark visited 'O' to '#' and add its coordinates to the queue
private void visit(char[][] board, int i, int j, Queue<Integer> q) {
    if (i < 0 || i > board.length - 1 || j < 0 || j > board[0].length - 1 || board[i][j] != 'O')
        return;
    board[i][j] = '#'; // mark 'O' on the boundary to be '#' (we can recover it to 'X' later)
    q.add(i * board[0].length + j);
}
	
	
	
/**
 * No. 200
 * Number of islands
 */

    public int numIslands(char[][] grid) {
	    int count = 0;
	    int n = grid.length;
	    if (n == 0) return 0;
	    int m = grid[0].length;
	    for (int i = 0; i < n; i++){
	        for (int j = 0; j < m; j++)
	            if (grid[i][j] == '1') {
	                DFSMarking(grid, i, j, m, n);
	                ++count;
	            }
	    }    
	    return count;
	}

	private void DFSMarking(char[][] grid, int i, int j, int m, int n) {
	    if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != '1') return;
	    grid[i][j] = '0';
	    DFSMarking(grid, i + 1, j, m,n);
	    DFSMarking(grid, i - 1, j, m, n);
	    DFSMarking(grid, i, j + 1, m, n);
	    DFSMarking(grid, i, j - 1, m, n);
	}


	/**
	 * Word search II
	 * 
	 * Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" 
cells are those horizontally or vertically neighboring.
The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].

	 */
	
	private static final int R = 26; // lowercase letter a to z
	private Node root;    

	// R-way trie node
	private static class Node {
	    private String val;
	    private Node[] next = new Node[R];
	}

	// insert key-value pair into trie
	private void insert(String key, String val) {
	    root = put(root, key, val, 0);
	}

	private Node put(Node x, String key, String val, int d) {
	    Node xCopy = x;
	    if (xCopy == null)  xCopy = new Node();
	    if (d == key.length()) {
	        xCopy.val = val;
	        return xCopy;
	    }
	    int c = key.charAt(d) - 'a';
	    xCopy.next[c] = put(xCopy.next[c], key, val, d + 1);
	    return xCopy;
	}

	public List<String> findWords(char[][] board, String[] words) {
	    List<String> list = new ArrayList<>();
	    int M = board.length;
	    if (M == 0) return list;
	    int N = board[0].length;
	    
	    // convert dictionary to a trie
	    int dictSize = words.length;
	    if (dictSize == 0) return list;
	    for (int i = 0; i < dictSize; i++) {
	        String word = words[i];
	        insert(word, word);
	    }
	            
	    // use DFS to search all valide words
	    boolean[][] visited = new boolean[M][N];
	    for (int i = 0; i < M; i++) {
	        for (int j = 0; j < N; j++) {
	            char letter = board[i][j];
	            int c = letter - 'a';
	            dfs(board, visited, i, j, root.next[c], list);
	        }
	    }
	    
	    // sort the list
	    Collections.sort(list);
	    return list;
	}

	// DFS
	private void dfs(char[][] board, boolean[][] visited, int i, int j, Node x, List<String> list) {
	    if (x == null)  return;
	    if (x.val != null && !list.contains(x.val)) {
	        list.add(x.val);
	    }
	    visited[i][j] = true;
	    if (i > 0 && !visited[i - 1][j])                    // up
	        dfs(board, visited, i - 1, j, x.next[board[i - 1][j] - 'a'], list);
	    if (i < board.length - 1 && !visited[i + 1][j])     // down
	        dfs(board, visited, i + 1, j, x.next[board[i + 1][j] - 'a'], list);
	    if (j > 0 && !visited[i][j - 1])                    // left
	        dfs(board, visited, i, j - 1, x.next[board[i][j - 1] - 'a'], list);
	    if (j < board[0].length - 1 && !visited[i][j + 1])  // right
	        dfs(board, visited, i, j + 1, x.next[board[i][j + 1] - 'a'], list);        
	    visited[i][j] = false;
	}

	
	/**
	 * No. 79
	 * word search I
	 * Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
	 */

	public boolean exist(char[][] board, String word) {
	    int m = board.length;
	    int n = board[0].length;
	    boolean[][] visited = new boolean[m][n];
	    for (int i = 0; i < m; i++) {
	        for (int j = 0; j < n; j++) {
	            if (dfs(board, visited, i, j, 0, word))
	                return true;
	        }
	    }
	    return false;
	}

	private boolean dfs(char[][] board, boolean[][] visited, int i, int j, int index, String word) {
	    if (index == word.length())   return true;
	    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length)    return false;   // stop if cross the board
	    if (visited[i][j])   return false;  // stop if visited
	    if (board[i][j] != word.charAt(index))  return false;   // stop if not match
	    visited[i][j] = true;   // marked as visited
	    boolean match = dfs(board, visited, i - 1, j, index + 1, word)
	                 || dfs(board, visited, i, j - 1, index + 1, word)
	                 || dfs(board, visited, i + 1, j, index + 1, word)
	                 || dfs(board, visited, i, j + 1, index + 1, word);
	    visited[i][j] = false;
	    return match;
	}
	
	
	public List<Integer> spiralOrder(int[][] matrix) {
		   List<Integer> elements = new ArrayList<>();
		   if (matrix.length == 0) return elements;
		   int m = matrix.length, n = matrix[0].length;
		   int row = 0, col = -1;
		   while (true) {
		      for (int i = 0; i < n; i++) {
		         elements.add(matrix[row][++col]);
		      }
		      if (--m == 0) break;
		      for (int i = 0; i < m; i++) {
		         elements.add(matrix[++row][col]);
		      }
		      if (--n == 0) break;
		      for (int i = 0; i < n; i++) {
		         elements.add(matrix[row][--col]);
		      }
		      if (--m == 0) break;
		      for (int i = 0; i < m; i++) {
		         elements.add(matrix[--row][col]);
		      }
		      if (--n == 0) break;
		   }
		   return elements;
		}
	
	/**
	 * Generate Spiral Matrix
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
For example,
Given n = 3,
You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
	 */
	
	public int[][] generateMatrix(int n) {
	    int[][] mat = new int[n][n];
	    if (n == 0) return mat;
	    int count = 1, row = n, col = n;
	    int i = 0, j = -1;
	    
	    while (true) {
	        for (int k = 0; k < col; k++)
	            mat[i][++j] = count++;  // go right
	        if (--row == 0)   break;
	        for (int k = 0; k < row; k++)
	            mat[++i][j] = count++;  // go down
	        if (--col == 0)   break;
	        for (int k = 0; k < col; k++)
	            mat[i][--j] = count++;  // go left
	        if (--row == 0)   break;
	        for (int k = 0; k < row; k++)
	            mat[--i][j] = count++;  // go up
	        if (--col == 0)   break;
	    }
	    
	    return mat;
	}
	
/**
 * No. 74
 * Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.
 * 
 * 	Log(M*N)
 * @param matrix
 * @param target
 * @return
 */

	
public boolean searchMatrix1(int[][] matrix, int target) {

	int row = matrix.length;
	int col = matrix[0].length;
	
	int low = 0; int high = row*col-1;
	while(low <= high){
	    int mid = low + (high-low)/2;
	    int x = mid/col;
	    int y = mid%col;
	    if(matrix[x][y] == target) return true;
	    else if(matrix[x][y] > target) high = mid-1;
	    else low = mid+1;
	}
	return false;
}

/*
 * No. 240
 * Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.


 */

public boolean searchMatrix2(int[][] matrix, int target) {
    int m = matrix.length;
    int n = matrix[0].length;
    
    int j = n-1;
    int i = 0;
    while(i< m && j>=0){
    	if(matrix[i][j] > target){
    		j--;
    	}else if(matrix[i][j] <target){
    		i++;
    	}else{
    		return true;
    	}
    }
    
    return false;
}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
